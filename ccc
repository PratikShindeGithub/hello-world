#!/bin/bash

CCC_PATH="/home/tbp-web/ccc-conf"
SCRIPT_PATH="/opt/web/scripte"
SERVERS="deccc3dr deccc4dr deptc3hr deptc4hr deptc5hr deptc6hr"

# Log file with timestamp
LOG_DIR="/var/log/ccc-update"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/update_$(date +'%Y%m%d_%H%M%S').log"

# Track step status & time
declare -A step_status
declare -A step_time
steps=(
    "Step 1: Check Git branch"
    "Step 2: Reset master and merge staging"
    "Step 3: Show Git log"
    "Step 4: Push changes"
    "Step 5: Update CCC"
    "Step 6: Validate updates"
)

# Function to log and display output
log() {
    echo -e "$@" | tee -a "$LOG_FILE"
}

# Function to confirm before running step
confirm_step() {
    local step_name="$1"
    read -rp "$step_name (y/n): " answer
    case $answer in
        [Yy]*) return 0 ;;  # Yes → run
        *) 
           log "❌ User chose to stop at: $step_name"
           step_status["$step_name"]="❌ Skipped (Stopped here)"
           show_summary
           exit 1
        ;;
    esac
}

# Function to run step with timing
run_step() {
    local step_name="$1"
    local step_func="$2"

    local start=$(date +%s)
    $step_func
    local end=$(date +%s)
    local duration=$((end - start))

    step_status["$step_name"]="✅ Done"
    step_time["$step_name"]=$duration
}

# Step 1: Check Git Branch
step1() {
    cd "$CCC_PATH" || exit
    git status 2>&1 | tee -a "$LOG_FILE"
}

# Step 2: Reset and Merge Staging
step2() {
    cd "$CCC_PATH" || exit
    ./reset-master-and-merge-staging.sh 2>&1 | tee -a "$LOG_FILE"
}

# Step 3: Show Git Log
step3() {
    cd "$CCC_PATH" || exit
    git log --oneline -n 10 2>&1 | tee -a "$LOG_FILE"
}

# Step 4: Push Changes
step4() {
    cd "$CCC_PATH" || exit
    git push origin master 2>&1 | tee -a "$LOG_FILE"
}

# Step 5: Update CCC
step5() {
    cd "$SCRIPT_PATH" || exit
    ./checkout-ccc-config-all.sh 2>&1 | tee -a "$LOG_FILE"
}

# Step 6: Validate Updates
step6() {
    for i in $SERVERS; do
        log "===== $i ====="
        ssh "$i" "ls -ltr /opt/web/tomcat/ccc/conf/ccc/repos" 2>&1 | tee -a "$LOG_FILE"
    done
}

# Show summary in step order
show_summary() {
    log "\n========== SUMMARY =========="
    local slowest_step=""
    local max_time=0

    for step in "${steps[@]}"; do
        local status="${step_status[$step]:-❌ Skipped}"
        local duration="${step_time[$step]:-N/A}"

        if [[ $duration != "N/A" && $duration -gt $max_time ]]; then
            max_time=$duration
            slowest_step="$step"
        fi

        log "$step : $status (Time: ${duration}s)"
    done

    if [[ -n "$slowest_step" ]]; then
        log "\n⚡ Slowest step: $slowest_step (${max_time}s)"
    fi

    log "============================="
    log "Log file: $LOG_FILE"
}

log "========== CCC Reference Data Update Started =========="
log "Log file: $LOG_FILE"

confirm_step "Step 1: Check Git branch?" && run_step "Step 1: Check Git branch" step1
confirm_step "Step 2: Reset master and merge staging?" && run_step "Step 2: Reset master and merge staging" step2
confirm_step "Step 3: Show Git log?" && run_step "Step 3: Show Git log" step3
confirm_step "Step 4: Push changes to central repository?" && run_step "Step 4: Push changes" step4
confirm_step "Step 5: Update CCC?" && run_step "Step 5: Update CCC" step5
confirm_step "Step 6: Validate updates?" && run_step "Step 6: Validate updates" step6

log "✅ All steps completed successfully."
show_summary