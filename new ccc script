#!/bin/bash

# =========================
# Paths and Servers
# =========================
CCC_PATH="/home/tbp-web/ccc-conf"
SCRIPT_PATH="/opt/web/scripte"
SERVERS="deccc3dr deccc4dr deptc3hr deptc4hr deptc5hr deptc6hr"

# =========================
# Colors
# =========================
BLUE_BOLD="\033[1;34m"
GREEN_BOLD="\033[1;32m"
RED_BOLD="\033[1;31m"
RESET="\033[0m"

# =========================
# Logging
# =========================
LOG_DIR="/var/log/ccc-update"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/update_$(date +'%Y%m%d_%H%M%S').log"

# =========================
# Step Tracking
# =========================
declare -A step_status
declare -A step_time
steps=(
    "Step 1: Check Git branch"
    "Step 2: Reset master and merge staging"
    "Step 3: Show commits to be pushed"
    "Step 4: Push changes"
    "Step 5: Update CCC"
    "Step 6: Validate updates"
)

# =========================
# Helper Functions
# =========================
print_step() {
    echo -e "${BLUE_BOLD}[STEP] $1${RESET}" | tee -a "$LOG_FILE"
}

print_output() {
    while IFS= read -r line; do
        echo -e "${GREEN_BOLD}$line${RESET}"
    done
}

confirm_step() {
    local step_name="$1"
    read -rp "$step_name (y/n): " answer
    case $answer in
        [Yy]*) return 0 ;;
        *) echo -e "${RED_BOLD}❌ Aborted at: $step_name${RESET}" | tee -a "$LOG_FILE"; exit 1 ;;
    esac
}

run_step() {
    local step_name="$1"
    local step_func="$2"

    print_step "$step_name"
    local start=$(date +%s)
    $step_func
    local end=$(date +%s)
    local duration=$((end - start))

    step_status["$step_name"]="✅ Done"
    step_time["$step_name"]=$duration
}

# =========================
# Step Implementations
# =========================

# Step 1: Check Git Branch
step1() {
    cd "$CCC_PATH" || exit
    current_branch=$(git rev-parse --abbrev-ref HEAD)

    if [[ "$current_branch" != "master" ]]; then
        echo -e "${RED_BOLD}❌ You are on branch '$current_branch'.${RESET}" | tee -a "$LOG_FILE"
        read -rp "Do you want to switch to 'master' and pull latest? (y/n): " fix_choice
        if [[ "$fix_choice" =~ ^[Yy]$ ]]; then
            echo -e "${BLUE_BOLD}Switching to master...${RESET}" | tee -a "$LOG_FILE"
            git checkout master 2>&1 | tee -a "$LOG_FILE"
            git pull origin master 2>&1 | tee -a "$LOG_FILE"
            echo -e "${GREEN_BOLD}✅ Switched to master. Proceeding...${RESET}" | tee -a "$LOG_FILE"
        else
            echo -e "${RED_BOLD}❌ Aborting. Please switch to master manually and rerun.${RESET}" | tee -a "$LOG_FILE"
            exit 1
        fi
    else
        echo -e "${GREEN_BOLD}✅ Already on branch 'master'. Proceeding...${RESET}" | tee -a "$LOG_FILE"
    fi

    git status | print_output
}

# Step 2: Reset and Merge Staging
step2() {
    cd "$CCC_PATH" || exit
    ./reset-master-and-merge-staging.sh 2>&1 | tee -a "$LOG_FILE" | print_output
}

# Step 3: Show commits to be pushed
step3() {
    cd "$CCC_PATH" || exit
    git fetch origin master >/dev/null 2>&1

    commits=$(git log origin/master..master \
      --pretty=format:"Commit: %C(yellow)%H%nAuthor: %Cgreen%an <%ae>%nDate:   %Cblue%ad%n%s%n" \
      --date=iso)

    if [[ -z "$commits" ]]; then
        echo -e "${GREEN_BOLD}✅ Nothing to push. Local master is up-to-date with origin/master.${RESET}" | tee -a "$LOG_FILE"
    else
        echo "$commits" | tee -a "$LOG_FILE" | print_output
    fi
}

# Step 4: Push Changes
step4() {
    cd "$CCC_PATH" || exit
    git push origin master 2>&1 | tee -a "$LOG_FILE" | print_output
}

# Step 5: Update CCC
step5() {
    cd "$SCRIPT_PATH" || exit
    ./checkout-ccc-config-all.sh 2>&1 | tee -a "$LOG_FILE" | print_output
}

# Step 6: Validate Updates
step6() {
    for i in $SERVERS; do
        echo -e "${BLUE_BOLD}Checking $i...${RESET}" | tee -a "$LOG_FILE"
        ssh "$i" "ls -ltr /opt/web/tomcat/ccc/conf/ccc/repos" 2>&1 | tee -a "$LOG_FILE" | print_output
    done
}

# =========================
# Summary
# =========================
show_summary() {
    echo -e "\n${BLUE_BOLD}========== SUMMARY ==========${RESET}" | tee -a "$LOG_FILE"
    local slowest_step=""
    local max_time=0

    for step in "${steps[@]}"; do
        local status="${step_status[$step]:-❌ Skipped}"
        local duration="${step_time[$step]:-N/A}"
        echo -e "${BLUE_BOLD}$step${RESET} : ${GREEN_BOLD}$status${RESET} (Time: ${duration}s)" | tee -a "$LOG_FILE"

        if [[ $duration != "N/A" && $duration -gt $max_time ]]; then
            max_time=$duration
            slowest_step="$step"
        fi
    done

    if [[ -n "$slowest_step" ]]; then
        echo -e "${RED_BOLD}⚡ Slowest step: $slowest_step (${max_time}s)${RESET}" | tee -a "$LOG_FILE"
    fi

    echo -e "${BLUE_BOLD}Log file:${RESET} $LOG_FILE"
}

# =========================
# Main Flow
# =========================
echo -e "${BLUE_BOLD}========== CCC Reference Data Update Started ==========${RESET}" | tee -a "$LOG_FILE"
echo "Log file: $LOG_FILE" | tee -a "$LOG_FILE"

confirm_step "Step 1: Check Git branch?" && run_step "Step 1: Check Git branch" step1
confirm_step "Step 2: Reset master and merge staging?" && run_step "Step 2: Reset master and merge staging" step2
confirm_step "Step 3: Show commits to be pushed?" && run_step "Step 3: Show commits to be pushed" step3
confirm_step "Step 4: Push changes to central repository?" && run_step "Step 4: Push changes" step4
confirm_step "Step 5: Update CCC?" && run_step "Step 5: Update CCC" step5
confirm_step "Step 6: Validate updates?" && run_step "Step 6: Validate updates" step6

echo -e "${GREEN_BOLD}✅ All steps completed successfully.${RESET}" | tee -a "$LOG_FILE"
show_summary